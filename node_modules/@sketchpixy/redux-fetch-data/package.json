{
  "_args": [
    [
      {
        "raw": "@sketchpixy/redux-fetch-data@^0.1.3",
        "scope": "@sketchpixy",
        "escapedName": "@sketchpixy%2fredux-fetch-data",
        "name": "@sketchpixy/redux-fetch-data",
        "rawSpec": "^0.1.3",
        "spec": ">=0.1.3 <0.2.0",
        "type": "range"
      },
      "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix"
    ]
  ],
  "_from": "@sketchpixy/redux-fetch-data@>=0.1.3 <0.2.0",
  "_id": "@sketchpixy/redux-fetch-data@0.1.3",
  "_inCache": true,
  "_location": "/@sketchpixy/redux-fetch-data",
  "_nodeVersion": "5.10.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/redux-fetch-data-0.1.3.tgz_1470985102872_0.1788121908903122"
  },
  "_npmUser": {
    "name": "shripadk",
    "email": "assortmentofsorts@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@sketchpixy/redux-fetch-data@^0.1.3",
    "scope": "@sketchpixy",
    "escapedName": "@sketchpixy%2fredux-fetch-data",
    "name": "@sketchpixy/redux-fetch-data",
    "rawSpec": "^0.1.3",
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@sketchpixy/rubix"
  ],
  "_resolved": "https://registry.npmjs.org/@sketchpixy/redux-fetch-data/-/redux-fetch-data-0.1.3.tgz",
  "_shasum": "c7323b59e6d5ea4ab7efc4039bb37c771e47a956",
  "_shrinkwrap": null,
  "_spec": "@sketchpixy/redux-fetch-data@^0.1.3",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix",
  "author": {
    "name": "Christoffer Niska",
    "email": "christofferniska@gmail.com"
  },
  "babel": {
    "presets": [
      "stage-2",
      "es2015",
      "react"
    ]
  },
  "bugs": {
    "url": "https://github.com/nordsoftware/redux-fetch-data/issues"
  },
  "dependencies": {
    "redux-actions": "^0.9.1"
  },
  "description": "Redux utility library for fetching data using promises on both server and client.",
  "devDependencies": {
    "babel-cli": "^6.6.5",
    "babel-core": "^6.7.0",
    "babel-eslint": "^6.0.4",
    "babel-istanbul": "^0.7.0",
    "babel-polyfill": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-2": "^6.5.0",
    "chai": "^3.5.0",
    "chai-enzyme": "^0.4.2",
    "chai-jsx": "^1.0.1",
    "codeclimate-test-reporter": "^0.3.1",
    "enzyme": "^2.3.0",
    "eslint": "^2.9.0",
    "eslint-plugin-react": "^5.1.1",
    "istanbul": "^1.0.0-alpha.2",
    "jsdom": "^9.0.0",
    "mocha": "^2.4.5",
    "react": "^15.0.2",
    "react-addons-test-utils": "^15.0.2",
    "react-dom": "^15.0.2",
    "react-redux": "^4.4.5",
    "react-router": "^2.4.0",
    "redux": "^3.5.2",
    "sinon": "^1.17.4",
    "sinon-chai": "^2.8.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c7323b59e6d5ea4ab7efc4039bb37c771e47a956",
    "tarball": "https://registry.npmjs.org/@sketchpixy/redux-fetch-data/-/redux-fetch-data-0.1.3.tgz"
  },
  "files": [
    "lib",
    "src",
    ".npmignore",
    "LICENSE",
    "README.md",
    "package.json"
  ],
  "homepage": "https://github.com/nordsoftware/redux-fetch-data#readme",
  "jsnext:main": "src/index.js",
  "keywords": [
    "redux",
    "ssr",
    "promise",
    "async",
    "data",
    "react-component"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "shripadk",
      "email": "assortmentofsorts@gmail.com"
    }
  ],
  "name": "@sketchpixy/redux-fetch-data",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.2",
    "react-redux": "^4.4.5",
    "redux": "^3.5.2"
  },
  "readme": "# redux-fetch-data\n\n[![Build Status](https://travis-ci.org/nordsoftware/redux-fetch-data.svg?branch=develop)](https://travis-ci.org/nordsoftware/redux-fetch-data)\n[![Test Coverage](https://codeclimate.com/github/nordsoftware/redux-fetch-data/badges/coverage.svg)](https://codeclimate.com/github/nordsoftware/redux-fetch-data/coverage)\n[![Code Climate](https://codeclimate.com/github/nordsoftware/redux-fetch-data/badges/gpa.svg)](https://codeclimate.com/github/nordsoftware/redux-fetch-data)\n[![npm version](https://img.shields.io/npm/v/redux-fetch-data.svg)](https://www.npmjs.com/package/redux-fetch-data)\n[![npm downloads](https://img.shields.io/npm/dt/redux-fetch-data.svg)](https://www.npmjs.com/package/redux-fetch-data)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nordsoftware/redux-fetch-data/master/LICENSE)\n[![Gitter](https://img.shields.io/gitter/room/norsoftware/open-source.svg?maxAge=2592000)](https://gitter.im/nordsoftware/open-source)\n\nRedux utility library for fetching data using promises on both server and client.\n\n## Install\n\n```bash\nnpm install redux-fetch-data --save\n```\n\n## Usage\n\n### Initial setup\n\n#### On the server\n\nHere is an example setup of a simple server. In this example we used Express, but any server framework will do.\n\n```js\nimport Express from 'express';\nimport React from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { match, RouterContext } from 'react-router';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { fetchDataOnServer, reducer as fetching } from 'redux-fetch-data';\nimport createHistory from 'react-router/lib/createMemoryHistory';\n\nimport routes from '../../routes';\n\nconst app = Express();\n\n// Renders the actual HTML page\nfunction renderHtml(html, state) {\n  return `\n    <!doctype html>\n    <html>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script dangerouslySetInnerHTML={{__html: `window.__INITIAL_STATE__=${JSON.stringify(state)};`}}\n                charSet=\"UTF-8\"/>\n      </body>\n    </html>\n  `;\n}\n\n// Register the rendering middleware\napp.use((req, res) => {\n  const history = createHistory(req.originalUrl);\n  const store = createStore(combineReducers({ fetching }));\n\n  match({ routes, location: req.url }, (err, redirect, renderProps) => {\n    // Fetch data\n    fetchDataOnServer(renderProps, store).then(() => {\n      // Data has been fetched, resolve request\n      if (err) {\n        res.status(500).send(err.message);\n      } else if (redirect) {\n        res.redirect(redirect.pathname + redirect.search);\n      } else if (renderProps) {\n        // Render the root component\n        const html = renderToString((\n          <Provider store={store} key=\"provider\">\n            <RouterContext {...renderProps}/>\n          </Provider>\n        ));\n\n        // Send the rendered page back to the client\n        res.status(200).send(renderHtml(html, store.getState()));\n      } else {\n        res.status(404).send('Not found.');\n      }\n    });\n  });\n});\n\napp.listen(3000);\n```\n\n#### On the client\n\nHere is an example of a client-side entry script.\n\n```js\nimport React from 'react';\nimport { createStore, combineReducers } from 'redux';\nimport { render } from 'react-dom';\nimport { Router, browserHistory } from 'react-router';\nimport { Provider } from 'react-redux';\nimport { FetchData, reducer as fetching } from 'redux-fetch-data';\n\nimport routes from './routes';\n\n// Hydrate the initial state from the server state\nconst initialState = window.__INITIAL_STATE__;\nconst store = createStore(combineReducers({ fetching }), initialState);\n\nrender(\n  <Provider store={store} key=\"provider\">\n    <Router render={props => <FetchData {...props}/>}\n            history={browserHistory}\n            routes={routes}/>\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n### Fetching data\n\nInstead of loading data in `componentWillMount`, move that logic to a static `fetchData` method.\nThis method should return a promise. Also, make sure you only fetch data from your containers\n(top-level components), and pass down the data as props to sub-components.\n\n```js\nexport class Foo extends Component {\n  static fetchData() {\n    // this method should return a promise\n  }\n  .....\n}\n```\n\n**Protip!** You can use `Promise.all` to combine multiple promises into one.\n\n## Tests\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nRun the test suite in watch mode:\n\n```bash\nnpm run test:watch <path>\n```\n\nGenerate the code coverage report:\n\n```bash\nnpm run test:cover\n```\n\n## License\n\nSee [LICENSE](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nordsoftware/redux-fetch-data.git"
  },
  "scripts": {},
  "version": "0.1.3"
}
