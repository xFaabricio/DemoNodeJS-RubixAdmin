{
  "_args": [
    [
      {
        "raw": "graphql-relay@^0.4.2",
        "scope": null,
        "escapedName": "graphql-relay",
        "name": "graphql-relay",
        "rawSpec": "^0.4.2",
        "spec": ">=0.4.2 <0.5.0",
        "type": "range"
      },
      "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix"
    ]
  ],
  "_from": "graphql-relay@>=0.4.2 <0.5.0",
  "_id": "graphql-relay@0.4.4",
  "_inCache": true,
  "_location": "/graphql-relay",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/graphql-relay-0.4.4.tgz_1479273330780_0.6595077374950051"
  },
  "_npmUser": {
    "name": "leebyron",
    "email": "lee@leebyron.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-relay@^0.4.2",
    "scope": null,
    "escapedName": "graphql-relay",
    "name": "graphql-relay",
    "rawSpec": "^0.4.2",
    "spec": ">=0.4.2 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@sketchpixy/rubix"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-relay/-/graphql-relay-0.4.4.tgz",
  "_shasum": "876a654445b6af4539f81cb9befd5cd7ead129dd",
  "_shrinkwrap": null,
  "_spec": "graphql-relay@^0.4.2",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix",
  "bugs": {
    "url": "https://github.com/graphql/graphql-relay-js/issues"
  },
  "contributors": [
    {
      "name": "Daniel Schafer",
      "email": "dschafer@fb.com"
    }
  ],
  "dependencies": {},
  "description": "A library to help construct a graphql-js server supporting react-relay.",
  "devDependencies": {
    "babel-cli": "6.18.0",
    "babel-core": "6.18.2",
    "babel-eslint": "7.1.0",
    "babel-plugin-check-es2015-constants": "6.8.0",
    "babel-plugin-syntax-async-functions": "6.13.0",
    "babel-plugin-transform-class-properties": "6.18.0",
    "babel-plugin-transform-es2015-arrow-functions": "6.8.0",
    "babel-plugin-transform-es2015-block-scoped-functions": "6.8.0",
    "babel-plugin-transform-es2015-block-scoping": "6.18.0",
    "babel-plugin-transform-es2015-classes": "6.18.0",
    "babel-plugin-transform-es2015-computed-properties": "6.8.0",
    "babel-plugin-transform-es2015-destructuring": "6.18.0",
    "babel-plugin-transform-es2015-duplicate-keys": "6.8.0",
    "babel-plugin-transform-es2015-function-name": "6.9.0",
    "babel-plugin-transform-es2015-literals": "6.8.0",
    "babel-plugin-transform-es2015-modules-commonjs": "6.18.0",
    "babel-plugin-transform-es2015-object-super": "6.8.0",
    "babel-plugin-transform-es2015-parameters": "6.18.0",
    "babel-plugin-transform-es2015-shorthand-properties": "6.18.0",
    "babel-plugin-transform-es2015-spread": "6.8.0",
    "babel-plugin-transform-es2015-template-literals": "6.8.0",
    "babel-plugin-transform-flow-strip-types": "6.18.0",
    "babel-plugin-transform-object-rest-spread": "6.16.0",
    "babel-plugin-transform-regenerator": "6.16.1",
    "chai": "3.5.0",
    "coveralls": "2.11.15",
    "eslint": "3.10.2",
    "eslint-plugin-babel": "3.3.0",
    "eslint-plugin-flowtype": "2.25.0",
    "flow-bin": "0.35.0",
    "graphql": "0.8.2",
    "isparta": "4.0.0",
    "mocha": "3.1.2",
    "sane": "1.4.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "shasum": "876a654445b6af4539f81cb9befd5cd7ead129dd",
    "tarball": "https://registry.npmjs.org/graphql-relay/-/graphql-relay-0.4.4.tgz"
  },
  "files": [
    "lib",
    "README.md",
    "LICENSE",
    "PATENTS"
  ],
  "gitHead": "2a01b29b66d531ab353f6efd42cbfa776173f5a7",
  "homepage": "https://github.com/graphql/graphql-relay-js",
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "dschafer",
      "email": "dschafer@fb.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "josephsavona",
      "email": "joesavona@fb.com"
    },
    {
      "name": "kassens",
      "email": "jkassens@fb.com"
    },
    {
      "name": "leebyron",
      "email": "lee@leebyron.com"
    },
    {
      "name": "schrockn",
      "email": "schrockn@gmail.com"
    },
    {
      "name": "steveluscher",
      "email": "steveluscher@fb.com"
    },
    {
      "name": "wincent",
      "email": "greg@hurrell.net"
    },
    {
      "name": "yungsters",
      "email": "yungsters@gmail.com"
    },
    {
      "name": "yuzhi",
      "email": "yuzhi.z@gmail.com"
    },
    {
      "name": "zpao",
      "email": "paul@oshannessy.com"
    }
  ],
  "name": "graphql-relay",
  "optionalDependencies": {},
  "options": {
    "mocha": "src/**/__tests__/**/*.js"
  },
  "peerDependencies": {
    "graphql": "^0.5.0 || ^0.6.0 || ^0.7.0 || ^0.8.0-b"
  },
  "readme": "# Relay Library for GraphQL.js\n\nThis is a library to allow the easy creation of Relay-compliant servers using the [GraphQL.js](https://github.com/graphql/graphql-js) reference implementation of a GraphQL server.\n\n[![Build Status](https://travis-ci.org/graphql/graphql-relay-js.svg?branch=master)](https://travis-ci.org/graphql/graphql-relay-js)\n[![Coverage Status](https://coveralls.io/repos/graphql/graphql-relay-js/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql/graphql-relay-js?branch=master)\n\n## Getting Started\n\nA basic understanding of GraphQL and of the GraphQL.js implementation is needed to provide context for this library.\n\nAn overview of GraphQL in general is available in the [README](https://github.com/facebook/graphql/blob/master/README.md) for the [Specification for GraphQL](https://github.com/facebook/graphql).\n\nThis library is designed to work with the [GraphQL.js](https://github.com/graphql/graphql-js) reference implementation of a GraphQL server.\n\nAn overview of the functionality that a Relay-compliant GraphQL server should provide is in the [GraphQL Relay Specification](https://facebook.github.io/relay/docs/graphql-relay-specification.html) on the [Relay website](https://facebook.github.io/relay/). That overview describes a simple set of examples that exist as [tests](src/__tests__) in this repository. A good way to get started with this repository is to walk through that documentation and the corresponding tests in this library together.\n\n## Using Relay Library for GraphQL.js\n\nInstall Relay Library for GraphQL.js\n\n```sh\nnpm install graphql graphql-relay\n```\n\nWhen building a schema for [GraphQL.js](https://github.com/graphql/graphql-js), the provided library functions can be used to simplify the creation of Relay patterns.\n\n### Connections\n\nHelper functions are provided for both building the GraphQL types for connections and for implementing the `resolve` method for fields returning those types.\n\n - `connectionArgs` returns the arguments that fields should provide when they return a connection type that supports bidirectional pagination.\n - `forwardConnectionArgs` returns the arguments that fields should provide when they return a connection type that only supports forward pagination.\n - `backwardConnectionArgs` returns the arguments that fields should provide when they return a connection type that only supports backward pagination.\n - `connectionDefinitions` returns a `connectionType` and its associated `edgeType`, given a node type.\n - `connectionFromArray` is a helper method that takes an array and the arguments from `connectionArgs`, does pagination and filtering, and returns an object in the shape expected by a `connectionType`'s `resolve` function.\n - `connectionFromPromisedArray` is similar to `connectionFromArray`, but it takes a promise that resolves to an array, and returns a promise that resolves to the expected shape by `connectionType`.\n - `cursorForObjectInConnection` is a helper method that takes an array and a member object, and returns a cursor for use in the mutation payload.\n- `offsetToCursor` takes the index of a member object in an array and returns an opaque cursor for use in the mutation payload.\n- `cursorToOffset` takes an opaque cursor (created with `offsetToCursor`) and returns the corresponding array index.\n\nAn example usage of these methods from the [test schema](src/__tests__/starWarsSchema.js):\n\n```js\nvar {connectionType: ShipConnection} =\n  connectionDefinitions({nodeType: shipType});\nvar factionType = new GraphQLObjectType({\n  name: 'Faction',\n  fields: () => ({\n    ships: {\n      type: ShipConnection,\n      args: connectionArgs,\n      resolve: (faction, args) => connectionFromArray(\n        faction.ships.map((id) => data.Ship[id]),\n        args\n      ),\n    }\n  }),\n});\n```\n\nThis shows adding a `ships` field to the `Faction` object that is a connection. It uses `connectionDefinitions({nodeType: shipType})` to create the connection type, adds `connectionArgs` as arguments on this function, and then implements the resolve function by passing the array of ships and the arguments to `connectionFromArray`.\n\n### Object Identification\n\nHelper functions are provided for both building the GraphQL types for nodes and for implementing global IDs around local IDs.\n\n - `nodeDefinitions` returns the `Node` interface that objects can implement, and returns the `node` root field to include on the query type. To implement this, it takes a function to resolve an ID to an object, and to determine the type of a given object.\n - `toGlobalId` takes a type name and an ID specific to that type name, and returns a \"global ID\" that is unique among all types.\n - `fromGlobalId` takes the \"global ID\" created by `toGlobalID`, and returns the type name and ID used to create it.\n - `globalIdField` creates the configuration for an `id` field on a node.\n - `pluralIdentifyingRootField` creates a field that accepts a list of non-ID identifiers (like a username) and maps them to their corresponding objects.\n\nAn example usage of these methods from the [test schema](src/__tests__/starWarsSchema.js):\n\n```js\nvar {nodeInterface, nodeField} = nodeDefinitions(\n  (globalId) => {\n    var {type, id} = fromGlobalId(globalId);\n    return data[type][id];\n  },\n  (obj) => {\n    return obj.ships ? factionType : shipType;\n  }\n);\n\nvar factionType = new GraphQLObjectType({\n  name: 'Faction',\n  fields: () => ({\n    id: globalIdField(),\n  }),\n  interfaces: [nodeInterface]\n});\n\nvar queryType = new GraphQLObjectType({\n  name: 'Query',\n  fields: () => ({\n    node: nodeField\n  })\n});\n```\n\nThis uses `nodeDefinitions` to construct the `Node` interface and the `node` field; it uses `fromGlobalId` to resolve the IDs passed in the implementation of the function mapping ID to object. It then uses the `globalIdField` method to create the `id` field on `Faction`, which also ensures implements the `nodeInterface`. Finally, it adds the `node` field to the query type, using the `nodeField` returned by `nodeDefinitions`.\n\n### Mutations\n\nA helper function is provided for building mutations with single inputs and client mutation IDs.\n\n - `mutationWithClientMutationId` takes a name, input fields, output fields, and a mutation method to map from the input fields to the output fields, performing the mutation along the way. It then creates and returns a field configuration that can be used as a top-level field on the mutation type.\n\nAn example usage of these methods from the [test schema](src/__tests__/starWarsSchema.js):\n\n```js\nvar shipMutation = mutationWithClientMutationId({\n  name: 'IntroduceShip',\n  inputFields: {\n    shipName: {\n      type: new GraphQLNonNull(GraphQLString)\n    },\n    factionId: {\n      type: new GraphQLNonNull(GraphQLID)\n    }\n  },\n  outputFields: {\n    ship: {\n      type: shipType,\n      resolve: (payload) => data['Ship'][payload.shipId]\n    },\n    faction: {\n      type: factionType,\n      resolve: (payload) => data['Faction'][payload.factionId]\n    }\n  },\n  mutateAndGetPayload: ({shipName, factionId}) => {\n    var newShip = {\n      id: getNewShipId(),\n      name: shipName\n    };\n    data.Ship[newShip.id] = newShip;\n    data.Faction[factionId].ships.push(newShip.id);\n    return {\n      shipId: newShip.id,\n      factionId: factionId,\n    };\n  }\n});\n\nvar mutationType = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: () => ({\n    introduceShip: shipMutation\n  })\n});\n```\n\nThis code creates a mutation named `IntroduceShip`, which takes a faction ID and a ship name as input. It outputs the `Faction` and the `Ship` in question. `mutateAndGetPayload` then gets an object with a property for each input field, performs the mutation by constructing the new ship, then returns an object that will be resolved by the output fields.\n\nOur mutation type then creates the `introduceShip` field using the return value of `mutationWithClientMutationId`.\n\n## Contributing\n\nAfter cloning this repo, ensure dependencies are installed by running:\n\n```sh\nnpm install\n```\n\nThis library is written in ES6 and uses [Babel](http://babeljs.io/) for ES5 transpilation and [Flow](http://flowtype.org/) for type safety. Widely consumable JavaScript can be produced by running:\n\n```sh\nnpm run build\n```\n\nOnce `npm run build` has run, you may `import` or `require()` directly from node.\n\nAfter developing, the full test suite can be evaluated by running:\n\n```sh\nnpm test\n```\n\nWhile actively developing, we recommend running\n\n```sh\nnpm run watch\n```\n\nin a terminal. This will watch the file system run lint, tests, and type checking automatically whenever you save a js file.\n\nTo lint the JS files and run type interface checks run `npm run lint`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/graphql/graphql-relay-js.git"
  },
  "scripts": {
    "build": "rm -rf lib/* && babel src --ignore __tests__ --out-dir lib",
    "check": "flow check",
    "cover": "babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "cover:lcov": "babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "lint": "eslint src",
    "prepublish": "./resources/prepublish.sh",
    "test": "npm run lint && npm run check && npm run testonly",
    "testonly": "babel-node ./node_modules/.bin/_mocha $npm_package_options_mocha",
    "watch": "babel-node scripts/watch.js"
  },
  "version": "0.4.4"
}
