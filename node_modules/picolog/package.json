{
  "_args": [
    [
      {
        "raw": "picolog@^1.0.0",
        "scope": null,
        "escapedName": "picolog",
        "name": "picolog",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/just-wait"
    ]
  ],
  "_from": "picolog@>=1.0.0 <2.0.0",
  "_id": "picolog@1.0.4",
  "_inCache": true,
  "_location": "/picolog",
  "_nodeVersion": "5.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/picolog-1.0.4.tgz_1457918567954_0.08996963105164468"
  },
  "_npmUser": {
    "name": "stijndewitt",
    "email": "StijnDeWitt@hotmail.com"
  },
  "_npmVersion": "3.5.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "picolog@^1.0.0",
    "scope": null,
    "escapedName": "picolog",
    "name": "picolog",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@sketchpixy/just-wait"
  ],
  "_resolved": "https://registry.npmjs.org/picolog/-/picolog-1.0.4.tgz",
  "_shasum": "a8e0b70b081e864b88b4c858bbfcb838817585d5",
  "_shrinkwrap": null,
  "_spec": "picolog@^1.0.0",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/just-wait",
  "author": {
    "name": "Stijn de Witt",
    "email": "StijnDeWitt@hotmail.com",
    "url": "http://StijnDeWitt.com"
  },
  "bugs": {
    "url": "https://github.com/download/picolog/issues"
  },
  "contributors": [],
  "copyright": "Copyright 2015 by [Stijn de Witt](http://StijnDeWitt.com). Some rights reserved.",
  "dependencies": {},
  "description": "Tiny logging helper for use in the browser, Node and Nashorn.",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-uglify": "~0.6.0",
    "grunt-umd": "^2.3.3",
    "load-grunt-tasks": "~1.0.0",
    "mocha": "^2.3.4"
  },
  "directories": {
    "test": "tests"
  },
  "dist": {
    "umd": "dist/picolog.umd.js",
    "min": "dist/picolog.min.js",
    "map": "dist/picolog.min.js.map"
  },
  "exports": [
    "log"
  ],
  "gitHead": "ab001c9cb7c4102c61296d78ab6be97631515eff",
  "homepage": "http://download.github.io/picolog",
  "keywords": [
    "javascript",
    "logging",
    "browser",
    "node",
    "nashorn"
  ],
  "license": "CC-BY-4.0",
  "licenseUrl": "https://creativecommons.org/licenses/by/4.0/",
  "main": "dist/picolog.umd.js",
  "maintainers": [
    {
      "name": "stijndewitt",
      "email": "StijnDeWitt@hotmail.com"
    }
  ],
  "name": "picolog",
  "optionalDependencies": {},
  "readme": "# picolog <sub><sup>v1.0.4</sup></sub>\r\n**Tiny logging helper for use in the browser, Node and Nashorn**\r\n\r\n![logo](https://cdn.rawgit.com/download/picolog/1.0.0/picolog.png)\r\n\r\n## Yet another logging library?\r\n**No. Picolog is much less than that.**\r\n\r\nAll Picolog is, is a tiny shim that lets you safely log to the console\r\nwithout having to worry about environments where no `console` object is\r\navailable. It just adds one feature: logging levels.\r\n\r\nBecause it uses native logging under the hood and it's [48 lines of code](https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.umd.js)\r\nweigh in at **just 945 bytes** minified and zipped, it allows you to keep your logging statements\r\naround in your production builds without having to worry about size/performance or polluting the\r\nuser's log with too many messages.\r\n\r\n## Download\r\n* [picolog.umd.js](https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.umd.js) (~2kB, source)\r\n* [picolog.min.js](https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.min.js) (~1kB, minified)\r\n* [picolog.min.js.map](https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.min.js.map) (~2kB, debug map file)\r\n\r\n## Install\r\nIf you are using NPM, you can install picolog with this command:\r\n```sh\r\nnpm install --save picolog\r\n```\r\nBy adding `--save`, we instruct NPM to add a dependency on the latest version of picolog to your package.json file.\r\n\r\n## Include on your page\r\nPicolog can be used directly from CDN, from a local script file, or from a module loader.\r\n\r\n### CDN\r\nThis is by far the easiest method and gives good performance to boost. Use this if you are in doubt.\r\n```xml\r\n<script src=\"https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.min.js\"></script>\r\n```\r\n\r\n### Local script file\r\nDownload picolog.min.js, place it in a folder `lib` on your website and include it like this:\r\n```xml\r\n<script src=\"lib/picolog.min.js\"></script>\r\n```\r\n\r\n### Module loaders\r\nPicolog implements the Universal Module Pattern and as such, is available to be consumed\r\nfrom Node modules as well as via an AMD loader such as RequireJS.\r\n\r\n#### Node\r\n```js\r\nvar log = require('picolog');\r\nlog.info('Picolog is loaded');\r\n```\r\n\r\n#### AMD\r\n```js\r\ndefine(['picolog'], function(log){\r\n\tlog.info('Picolog is loaded');\r\n});\r\n```\r\nTo be able to load Picolog from CDN as an AMD module, configure the CDN url like so <small>(note the absence of `.js` in the url)</small>:\r\n```js\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'picolog': 'https://cdn.rawgit.com/download/picolog/1.0.4/dist/picolog.min'\r\n\t}\r\n});\r\n```\r\n\r\n### Using Picolog as a console replacement\r\nSometimes scripts beyond your control are logging to the console and you wish you could influence\r\ntheir output. In environments where you are allowed to replace the console, picolog can be a solution:\r\n\r\n```\r\n// assuming `log` is the picolog object\r\nvar orgConsole;\r\nif (typeof console == 'object') {\r\n\torgConsole = console; // hang on to original\r\n\tconsole = log;\r\n\tif (console !== log) {\r\n\t\tlog.log('Replacing the console is not allowed in this environment');\r\n\t}\r\n}\r\n```\r\n\r\n### Using Picolog in Nashorn\r\nSince Java 8, the JVM comes with a built-in Javascript interpreter called [Nashorn](http://openjdk.java.net/projects/nashorn/).\r\nNashorn does not as of yet support any module loaders, but you can load Picolog directly into the interpreter like this:\r\n```java\r\nScriptEngine engine = new ScriptEngineManager().getEngineByName(\"nashorn\");\r\n// Load picolog from classpath\r\nClassLoader loader = this.getClass().getClassLoader();\r\nInputStream resource = loader.getResourceAsStream(\"my/pkg/picolog.min.js\")\r\nInputStreamReader picolog = new InputStreamReader(resource, \"utf-8\");\r\n// Or, load picolog from the file system\r\nFileReader picolog = new FileReader(\"/file/path/to/picolog.min.js\");\r\n// Add it to the script engine\r\nengine.eval(picolog);\r\n```\r\nYou can use `ClassLoader.getResourceAsStream` to read the script file from your classpath. This allows you to bundle\r\nthe script inside your JAR/WAR and read it directly from there using just the 'package' in which the script resides.\r\nAlternatively, you can use `new FileReader(path)`, where path is a filepath, absolute, or relative to the current\r\ndirectory.\r\n\r\n## Logging methods\r\nPicolog defines 6 logging methods, which correspond with available log levels:\r\n```js\r\nlog.error('This logs an ERROR message');\r\nlog.warn('This logs a WARN message');\r\nlog.info('This logs an INFO message');\r\nlog.log('This logs a LOG message');\r\nlog.debug('This logs a DEBUG message');\r\nlog.trace('This logs a TRACE message');\r\n```\r\nPicolog does **not** mess with your stacktrace or line numbers. Line numbers shown in the console\r\nwill be from your code, not from some wrapper function..\r\n\r\n## Logging levels\r\nPicolog defines 6 logging levels, which correspond with the available logging methods:\r\n```js\r\nlog.ERROR; // 1\r\nlog.WARN;  // 2\r\nlog.INFO;  // 3\r\nlog.LOG;   // 4\r\nlog.DEBUG; // 5\r\nlog.TRACE; // 6\r\n```\r\nIn addition, there is a 7th level that completely disables all logging:\r\n```js\r\nlog.NONE;  // 0\r\n```\r\nTo get or set the log level, we use the `log.level` property:\r\n```js\r\nif (log.level >= log.INFO) {\r\n\tlog.info('This message will be logged');\r\n}\r\nlog.level = log.WARN;\r\nlog.info('This info message will NOT be logged.');\r\nlog.warn('This warning message WILL be logged.');\r\nlog.level = log.NONE;\r\nlog.error('Logging is completely disabled.');\r\n```\r\nBy default, the log level is set to `log.WARN` so under normal conditions there will be no logging.\r\n\r\nTo change the log level on a web page we are looking at we can do two things:\r\n 1. Open the console and manually set the log level from there\r\n 2. Add a parameter to the url of the page we want to inspect (browsers only)\r\n\r\nWhen we set the log level in the console, new messages logged\r\nat or above that level will start to appear, but we will not see\r\nthe messages that were logged before that moment. To make sure\r\nwe see our log messages from the very first moment the page is\r\nloaded, we can set the log level as a querystring parameter\r\nnamed `log`, like this:\r\n\r\n`http://www.example.com/?`**`log=debug`**\r\n\r\nBoth the uppercase and lowercase names of the log levels work,\r\nas well as their numerical value.\r\n\r\nWhen using picolog on Node JS, we can set an environment variable `PICOLOG_LEVEL` and it\r\nwill be picked up by picolog when it loads:\r\n```sh\r\nC:\\ws\\picolog>set PICOLOG_LEVEL=debug\r\n\r\nC:\\ws\\picolog>node tests/test-env.js\r\nTesting picolog. process.env.PICOLOG_LEVEL=debug\r\n v  `log.level` is set to `log.DEBUG`\r\n v  All tests OK!\r\n```\r\n\r\n## Using picolog as a polyfill\r\nAs of version 1.0.0, picolog supports all functions in the [NodeJS Console API](https://nodejs.org/api/console.html),\r\nso you should be able to use it as a polyfill in environments where there is no `console` available (e.g. Nashorn):\r\n```js\r\n// assuming you already made sure there is a `global` object\r\nglobal.console = log;\r\nconsole.info('Nashorn can do logging to!');\r\n```\r\n\r\n## Performance considerations\r\nThe logging methods on the `log` object that correspond to a log level which is higher than the\r\ncurrently set level, are replaced by no-op methods. As such, you generally don't have to worry\r\nabout the performance overhead of leaving the log statements in the production code. There is\r\none exception to this rule though. If preparing the message itself is a costly operation, you\r\nmay want to surround the log code with an `if (log.level >= myLevel)` statement:\r\n```js\r\nif (log.level >= log.INFO) {\r\n\tvar message = doLotsOfWorkToGenerateLogMessage();\r\n\tlog.info(message);\r\n}\r\n```\r\n\r\n## Copyright\r\nCopyright 2015 by [Stijn de Witt](http://StijnDeWitt.com). Some rights reserved.\r\n\r\n## License\r\nLicensed under the [Creative Commons Attribution 4.0 International (CC-BY-4.0)](https://creativecommons.org/licenses/by/4.0/) Open Source license.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/download/picolog.git"
  },
  "scripts": {
    "test": "node tests/test-cjs.js"
  },
  "src": "src/picolog.js",
  "version": "1.0.4"
}
