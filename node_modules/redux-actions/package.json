{
  "_args": [
    [
      {
        "raw": "redux-actions@^0.9.1",
        "scope": null,
        "escapedName": "redux-actions",
        "name": "redux-actions",
        "rawSpec": "^0.9.1",
        "spec": ">=0.9.1 <0.10.0",
        "type": "range"
      },
      "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/redux-fetch-data"
    ]
  ],
  "_from": "redux-actions@>=0.9.1 <0.10.0",
  "_id": "redux-actions@0.9.1",
  "_inCache": true,
  "_location": "/redux-actions",
  "_nodeVersion": "5.0.0",
  "_npmUser": {
    "name": "acdlite",
    "email": "acdlite@me.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-actions@^0.9.1",
    "scope": null,
    "escapedName": "redux-actions",
    "name": "redux-actions",
    "rawSpec": "^0.9.1",
    "spec": ">=0.9.1 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@sketchpixy/redux-fetch-data"
  ],
  "_resolved": "https://registry.npmjs.org/redux-actions/-/redux-actions-0.9.1.tgz",
  "_shasum": "a72767654bc21424c3df3f6240780ffa8872783c",
  "_shrinkwrap": null,
  "_spec": "redux-actions@^0.9.1",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/redux-fetch-data",
  "author": {
    "name": "Andrew Clark",
    "email": "acdlite@me.com"
  },
  "bugs": {
    "url": "https://github.com/acdlite/redux-actions/issues"
  },
  "dependencies": {
    "flux-standard-action": "^0.6.0",
    "reduce-reducers": "^0.1.0"
  },
  "description": "Flux Standard Action utlities for Redux",
  "devDependencies": {
    "babel": "^5.6.14",
    "babel-core": "^5.6.15",
    "babel-eslint": "^3.1.20",
    "chai": "^3.0.0",
    "eslint": "^0.24.0",
    "eslint-config-airbnb": "0.0.6",
    "lodash.isplainobject": "^3.2.0",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "a72767654bc21424c3df3f6240780ffa8872783c",
    "tarball": "https://registry.npmjs.org/redux-actions/-/redux-actions-0.9.1.tgz"
  },
  "files": [
    "src",
    "lib"
  ],
  "gitHead": "c3e0816caa878bc89b902453d1b895e8d7f9db97",
  "homepage": "https://github.com/acdlite/redux-actions",
  "keywords": [
    "flux",
    "redux",
    "fsa",
    "actions"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    }
  ],
  "name": "redux-actions",
  "optionalDependencies": {},
  "readme": "redux-actions\n=============\n\n[![build status](https://img.shields.io/travis/acdlite/redux-actions/master.svg?style=flat-square)](https://travis-ci.org/acdlite/redux-actions)\n[![npm version](https://img.shields.io/npm/v/redux-actions.svg?style=flat-square)](https://www.npmjs.com/package/redux-actions)\n\n[Flux Standard Action](https://github.com/acdlite/flux-standard-action) utilities for Redux.\n\n```js\nnpm install --save redux-actions\n```\n```js\nimport { createAction, handleAction, handleActions } from 'redux-actions';\n```\n\n### `createAction(type, payloadCreator = Identity, ?metaCreator)`\n\nWraps an action creator so that its return value is the payload of a Flux Standard Action. If no payload creator is passed, or if it's not a function, the identity function is used.\n\nExample:\n\n```js\nlet increment = createAction('INCREMENT', amount => amount);\n// same as\nincrement = createAction('INCREMENT');\n\nexpect(increment(42)).to.deep.equal({\n  type: 'INCREMENT',\n  payload: 42\n});\n```\n\nIf the payload is an instance of an [Error\nobject](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error),\nredux-actions will automatically set ```action.error``` to true.\n\nExample:\n\n```js\nconst increment = createAction('INCREMENT');\n\nconst error = new TypeError('not a number');\nexpect(increment(error)).to.deep.equal({\n  type: 'INCREMENT',\n  payload: error,\n  error: true\n});\n```\n\n**NOTE:** The more correct name for this function is probably `createActionCreator()`, but that seems a bit redundant.\n\nUse the identity form to create one-off actions:\n\n```js\ncreateAction('ADD_TODO')('Use Redux');\n```\n\n`metaCreator` is an optional function that creates metadata for the payload. It receives the same arguments as the payload creator, but its result becomes the meta field of the resulting action. If `metaCreator` is undefined or not a function, the meta field is omitted.\n\n### `handleAction(type, reducer | reducerMap)`\n\nWraps a reducer so that only handles Flux Standard Actions of a certain type.\n\nIf a single reducer is passed, it is used to handle both normal actions and failed actions. (A failed action is analogous to a rejected promise.) You can use this form if you know a certain type of action will never fail, like the increment example above.\n\nOtherwise, you can specify separate reducers for `next()` and `throw()`. This API is inspired by the ES6 generator interface.\n\n```js\nhandleAction('FETCH_DATA', {\n  next(state, action) {...}\n  throw(state, action) {...}\n});\n```\n\n### `handleActions(reducerMap, ?defaultState)`\n\nCreates multiple reducers using `handleAction()` and combines them into a single reducer that handles multiple actions. Accepts a map where the keys are the passed as the first parameter to `handleAction()` (the action type), and the values are passed as the second parameter (either a reducer or reducer map).\n\nThe optional second parameter specifies a default or initial state, which is used when `undefined` is passed to the reducer.\n\n(Internally, `handleActions()` works by applying multiple reducers in sequence using [reduce-reducers](https://github.com/acdlite/reduce-reducers).)\n\nExample:\n\n```js\nconst reducer = handleActions({\n  INCREMENT: (state, action) => ({\n    counter: state.counter + action.payload\n  }),\n\n  DECREMENT: (state, action) => ({\n    counter: state.counter - action.payload\n  })\n}, { counter: 0 });\n```\n\n## Usage with middleware\n\nredux-actions is handy all by itself, however, its real power comes when you combine it with middleware.\n\nThe identity form of `createAction` is a great way to create a single action creator that handles multiple payload types. For example, using [redux-promise](https://github.com/acdlite/redux-promise) and [redux-rx](https://github.com/acdlite/redux-rx):\n\n```js\nconst addTodo = createAction('ADD_TODO');\n\n// A single reducer...\nhandleAction('ADD_TODO', (state = { todos: [] }, action) => ({\n  ...state,\n  todos: [...state.todos, action.payload]\n}));\n\n// ...that works with all of these forms:\n// (Don't forget to use `bindActionCreators()` or equivalent.\n// I've left that bit out)\naddTodo('Use Redux')\naddTodo(Promise.resolve('Weep with joy'));\naddTodo(Observable.of(\n  'Learn about middleware',\n  'Learn about higher-order stores'\n)).subscribe();\n```\n\n## See also\n\nUse redux-actions in combination with FSA-compliant libraries.\n\n- [redux-promise](https://github.com/acdlite/redux-promise) - Promise middleware\n- [redux-rx](https://github.com/acdlite/redux-rx) - Includes observable middleware.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/acdlite/redux-actions.git"
  },
  "scripts": {
    "prepublish": "make clean build",
    "test": "make test"
  },
  "version": "0.9.1"
}
