{
  "_args": [
    [
      {
        "raw": "express-graphql@^0.5.3",
        "scope": null,
        "escapedName": "express-graphql",
        "name": "express-graphql",
        "rawSpec": "^0.5.3",
        "spec": ">=0.5.3 <0.6.0",
        "type": "range"
      },
      "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix"
    ]
  ],
  "_from": "express-graphql@>=0.5.3 <0.6.0",
  "_id": "express-graphql@0.5.4",
  "_inCache": true,
  "_location": "/express-graphql",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/express-graphql-0.5.4.tgz_1472174211062_0.007256204728037119"
  },
  "_npmUser": {
    "name": "leebyron",
    "email": "lee@leebyron.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-graphql@^0.5.3",
    "scope": null,
    "escapedName": "express-graphql",
    "name": "express-graphql",
    "rawSpec": "^0.5.3",
    "spec": ">=0.5.3 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@sketchpixy/rubix"
  ],
  "_resolved": "https://registry.npmjs.org/express-graphql/-/express-graphql-0.5.4.tgz",
  "_shasum": "413477e3efda6d7437e788f7ef6c994914e79f88",
  "_shrinkwrap": null,
  "_spec": "express-graphql@^0.5.3",
  "_where": "/Users/aaronfigueroa/Desktop/rubix/demo/node_modules/@sketchpixy/rubix",
  "babel": {
    "presets": [
      "es2015"
    ],
    "plugins": [
      "add-module-exports",
      "transform-class-properties",
      "transform-flow-strip-types"
    ]
  },
  "bugs": {
    "url": "https://github.com/graphql/express-graphql/issues"
  },
  "contributors": [
    {
      "name": "Lee Byron",
      "email": "lee@leebyron.com",
      "url": "http://leebyron.com/"
    },
    {
      "name": "Daniel Schafer",
      "email": "dschafer@fb.com"
    },
    {
      "name": "Caleb Meredith",
      "email": "calebmeredith8@gmail.com"
    }
  ],
  "dependencies": {
    "accepts": "^1.3.0",
    "content-type": "^1.0.0",
    "http-errors": "^1.3.0",
    "raw-body": "^2.1.0"
  },
  "description": "Production ready GraphQL HTTP middleware.",
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-eslint": "6.0.4",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-async-to-generator": "6.8.0",
    "babel-plugin-transform-class-properties": "6.9.0",
    "babel-plugin-transform-flow-strip-types": "6.8.0",
    "babel-plugin-transform-runtime": "6.9.0",
    "babel-preset-es2015": "6.9.0",
    "babel-register": "6.9.0",
    "babel-runtime": "6.9.0",
    "body-parser": "1.15.1",
    "chai": "3.5.0",
    "connect": "3.4.1",
    "content-type": "1.0.1",
    "coveralls": "2.11.9",
    "eslint": "2.10.2",
    "eslint-plugin-babel": "3.2.0",
    "express": "4.13.4",
    "express3": "*",
    "flow-bin": "0.25.0",
    "graphql": "0.7.0",
    "isparta": "4.0.0",
    "mocha": "2.5.3",
    "multer": "1.1.0",
    "raw-body": "2.1.6",
    "sane": "1.3.4",
    "supertest": "1.0.1",
    "supertest-as-promised": "2.0.2"
  },
  "directories": {
    "lib": "./dist"
  },
  "dist": {
    "shasum": "413477e3efda6d7437e788f7ef6c994914e79f88",
    "tarball": "https://registry.npmjs.org/express-graphql/-/express-graphql-0.5.4.tgz"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE",
    "PATENTS"
  ],
  "gitHead": "20e73c4ff8ce7c95e320bf6bc673560ea87dc997",
  "homepage": "https://github.com/graphql/express-graphql#readme",
  "keywords": [
    "express",
    "connect",
    "http",
    "graphql",
    "middleware",
    "api"
  ],
  "license": "BSD-3-Clause",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "leebyron",
      "email": "lee@leebyron.com"
    }
  ],
  "name": "express-graphql",
  "optionalDependencies": {},
  "options": {
    "mocha": "--require resources/mocha-bootload src/**/__tests__/**/*.js"
  },
  "peerDependencies": {
    "graphql": "^0.5.0-b || ^0.6.0 || ^0.7.0"
  },
  "readme": "GraphQL HTTP Server Middleware\n==============================\n\n[![Build Status](https://travis-ci.org/graphql/express-graphql.svg?branch=master)](https://travis-ci.org/graphql/express-graphql)\n[![Coverage Status](https://coveralls.io/repos/graphql/express-graphql/badge.svg?branch=master&service=github)](https://coveralls.io/github/graphql/express-graphql?branch=master)\n\nCreate a GraphQL HTTP server with any HTTP web framework that supports connect styled middleware, including [Connect](https://github.com/senchalabs/connect) itself and [Express](http://expressjs.com).\n\n## Installation\n\n```sh\nnpm install --save express-graphql\n```\n\nThen mount `express-graphql` as a route handler:\n\n```js\nconst express = require('express');\nconst graphqlHTTP = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', graphqlHTTP({\n  schema: MyGraphQLSchema,\n  graphiql: true\n}));\n\napp.listen(4000);\n```\n\n## Options\n\nThe `graphqlHTTP` function accepts the following options:\n\n  * **`schema`**: A `GraphQLSchema` instance from [`graphql-js`][].\n    A `schema` *must* be provided.\n\n  * **`graphiql`**: If `true`, presents [GraphiQL][] when the route with a\n    `/graphiql` appended is loaded in a browser. We recommend that you set\n    `graphiql` to `true` when your app is in development, because it's\n    quite useful. You may or may not want it in production.\n\n  * **`rootValue`**: A value to pass as the `rootValue` to the `graphql()`\n    function from [`graphql-js`][].\n\n  * **`context`**: A value to pass as the `context` to the `graphql()`\n    function from [`graphql-js`][]. If `context` is not provided, the\n    `request` object is passed as the context.\n\n  * **`pretty`**: If `true`, any JSON response will be pretty-printed.\n\n  * **`formatError`**: An optional function which will be used to format any\n    errors produced by fulfilling a GraphQL operation. If no function is\n    provided, GraphQL's default spec-compliant [`formatError`][] function will be used.\n\n  * **`validationRules`**: Optional additional validation rules queries must\n    satisfy in addition to those defined by the GraphQL spec.\n\n\n## HTTP Usage\n\nOnce installed at a path, `express-graphql` will accept requests with\nthe parameters:\n\n  * **`query`**: A string GraphQL document to be executed.\n\n  * **`variables`**: The runtime values to use for any GraphQL query variables\n    as a JSON object.\n\n  * **`operationName`**: If the provided `query` contains multiple named\n    operations, this specifies which operation should be executed. If not\n    provided, a 400 error will be returned if the `query` contains multiple\n    named operations.\n\n  * **`raw`**: If the `graphiql` option is enabled and the `raw` parameter is\n    provided raw JSON will always be returned instead of GraphiQL even when\n    loaded from a browser.\n\nGraphQL will first look for each parameter in the URL's query-string:\n\n```\n/graphql?query=query+getUser($id:ID){user(id:$id){name}}&variables={\"id\":\"4\"}\n```\n\nIf not found in the query-string, it will look in the POST request body.\n\nIf a previous middleware has already parsed the POST body, the `request.body`\nvalue will be used. Use [`multer`][] or a similar middleware to add support\nfor `multipart/form-data` content, which may be useful for GraphQL mutations\ninvolving uploading files. See an [example using multer](https://github.com/graphql/express-graphql/blob/master/src/__tests__/http-test.js#L650).\n\nIf the POST body has not yet been parsed, express-graphql will interpret it\ndepending on the provided *Content-Type* header.\n\n  * **`application/json`**: the POST body will be parsed as a JSON\n    object of parameters.\n\n  * **`application/x-www-form-urlencoded`**: this POST body will be\n    parsed as a url-encoded string of key-value pairs.\n\n  * **`application/graphql`**: The POST body will be parsed as GraphQL\n    query string, which provides the `query` parameter.\n\n\n## Combining with Other Express Middleware\n\nBy default, the express request is passed as the GraphQL `context`.\nSince most express middleware operates by adding extra data to the\nrequest object, this means you can use most express middleware just by inserting it before `graphqlHTTP` is mounted. This covers scenarios such as authenticating the user, handling file uploads, or mounting GraphQL on a dynamic endpoint.\n\nThis example uses [`express-session`][] to provide GraphQL with the currently logged-in session.\n\n```js\nconst session = require('express-session');\nconst graphqlHTTP = require('express-graphql');\n\nconst app = express();\n\napp.use(session({ secret: 'keyboard cat', cookie: { maxAge: 60000 }}));\n\napp.use('/graphql', graphqlHTTP({\n  schema: MySessionAwareGraphQLSchema,\n  graphiql: true\n}));\n```\n\nThen in your type definitions, you can access the request via the third \"context\" argument in your `resolve` function:\n\n```js\nnew GraphQLObjectType({\n  name: 'MyType',\n  fields: {\n    myField: {\n      type: GraphQLString,\n      resolve(parentValue, args, request) {\n        // use `request.session` here\n      }\n    }\n  }\n});\n```\n\n\n## Debugging Tips\n\nDuring development, it's useful to get more information from errors, such as\nstack traces. Providing a function to `formatError` enables this:\n\n```js\nformatError: error => ({\n  message: error.message,\n  locations: error.locations,\n  stack: error.stack\n})\n```\n\n\n[`graphql-js`]: https://github.com/graphql/graphql-js\n[`formatError`]: https://github.com/graphql/graphql-js/blob/master/src/error/formatError.js\n[GraphiQL]: https://github.com/graphql/graphiql\n[`multer`]: https://github.com/expressjs/multer\n[`express-session`]: https://github.com/expressjs/session\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/graphql/express-graphql.git"
  },
  "scripts": {
    "build": "rm -rf dist/* && babel src --ignore __tests__ --out-dir dist",
    "check": "flow check",
    "cover": "babel-node node_modules/.bin/isparta cover --root src --report html node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "cover:lcov": "babel-node node_modules/.bin/isparta cover --root src --report lcovonly node_modules/.bin/_mocha -- $npm_package_options_mocha",
    "lint": "eslint src",
    "prepublish": ". ./resources/prepublish.sh",
    "preversion": "npm test",
    "test": "npm run lint && npm run check && npm run testonly",
    "testonly": "mocha $npm_package_options_mocha",
    "watch": "babel --optional runtime resources/watch.js | node"
  },
  "version": "0.5.4"
}
